name: Slack Notifications (Issues/PRs/Releases)

on:
  workflow_dispatch:
    inputs:
      test_message:
        description: 'Send a test message to Slack'
        required: false
        default: 'Manual test from workflow_dispatch'
  issues:
    types: [opened, edited, closed, reopened, assigned, labeled, unlabeled]
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, ready_for_review, review_requested, closed, reopened, converted_to_draft, synchronize]
  release:
    types: [published]

permissions:
  contents: read

jobs:
  notify:
    runs-on: ubuntu-latest
    # 노이즈 줄이고 싶으면 아래처럼 조건을 추가해 주세요 (예: 라벨 없을 때만 전송)
    # if: ${{ github.event_name != 'issues' || !contains(join(github.event.issue.labels.*.name, ','), 'no-slack') }}

    steps:
      - name: Build Slack payload (Block Kit)
        id: payload
        env:
          EVENT_PATH: ${{ github.event_path }}
          GITHUB_RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          TEST_MESSAGE: ${{ inputs.test_message }}
        run: |
          set -euo pipefail
          # 공통 컨텍스트 추출
          REPO="$(jq -r '.repository.full_name' "$EVENT_PATH")"
          ACTOR="${GITHUB_ACTOR}"
          EVENT_NAME="${GITHUB_EVENT_NAME}"
          ACTION="$(jq -r '.action // empty' "$EVENT_PATH")"

          # URL/제목/본문/번호/머지여부 등 추출
          URL=$(jq -r '.issue.html_url // .pull_request.html_url // .release.html_url // .comment.html_url // .repository.html_url' "$EVENT_PATH")
          NUMBER=$(jq -r '.issue.number // .pull_request.number // empty' "$EVENT_PATH")
          TITLE_RAW=$(jq -r '.issue.title // .pull_request.title // .release.name // empty' "$EVENT_PATH")
          BODY_RAW=$(jq -r '.issue.body // .pull_request.body // .release.body // .comment.body // empty' "$EVENT_PATH")
          BODY_TRUNC=$(printf "%s" "$BODY_RAW" | head -c 500)

          MERGED=$(jq -r '.pull_request.merged // false' "$EVENT_PATH")

          # 이벤트별 타이틀/이모지/색상
          TITLE=""
          COLOR="#dddddd"
          case "${EVENT_NAME}/${ACTION}" in
            issues/opened)              TITLE="🆕 이슈 열림" ; COLOR="#36a64f" ;;
            issues/closed)              TITLE="✅ 이슈 닫힘" ; COLOR="#aaaaaa" ;;
            issues/reopened)            TITLE="♻️ 이슈 다시 열림" ; COLOR="#e3b341" ;;
            pull_request/opened)        TITLE="📣 풀 리퀘스트 요청" ; COLOR="#439FE0" ;;
            pull_request/ready_for_review) TITLE="🚀 풀 리퀘스트 리뷰 요청 준비됨" ; COLOR="#439FE0" ;;
            pull_request/converted_to_draft) TITLE="📝 풀 리퀘스트 초안으로 변경" ; COLOR="#aaaaaa" ;;
            pull_request/closed)
              if [ "$MERGED" = "true" ]; then
                TITLE="🎉 풀 리퀘스트 머지됨" ; COLOR="#6f42c1"
              else
                TITLE="⛔️ 풀 리퀘스트 취소" ; COLOR="#aaaaaa"
              fi
              ;;
            pull_request/synchronize)   TITLE="🔄 풀 리퀘스트 업데이트" ; COLOR="#439FE0" ;;
            release/published)          TITLE="🏷️ 릴리즈 배포" ; COLOR="#2eb67d" ;;
            issue_comment/created)      TITLE="💬 새로운 댓글" ; COLOR="#4a154b" ;;
            */)
              # workflow_dispatch 등
              TITLE="ℹ️ GitHub notification"
              ;;
            *)
              TITLE="ℹ️ ${EVENT_NAME} (${ACTION})"
              ;;
          esac

          # 수동 실행 시 테스트 메시지 지원
          if [ "${EVENT_NAME}" = "workflow_dispatch" ]; then
            BODY_TRUNC="${TEST_MESSAGE}"
            URL="https://github.com/${{ github.repository }}"
          fi

          # 본문 없으면 대체문구
          if [ -z "${BODY_TRUNC}" ]; then
            BODY_TRUNC="(no description)"
          fi

          # 번호 표기
          NUM_FIELD=""
          if [ -n "${NUMBER}" ]; then
            NUM_FIELD="*Number:* #${NUMBER}\n"
          fi

          # Slack Block Kit payload 작성 (jq로 안전하게)
          jq -n \
            --arg title        "$TITLE — $REPO" \
            --arg actor        "$ACTOR" \
            --arg eventname    "$EVENT_NAME" \
            --arg action       "$ACTION" \
            --arg url          "$URL" \
            --arg repo         "$REPO" \
            --arg numberField  "$NUM_FIELD" \
            --arg summary      "$TITLE_RAW" \
            --arg body         "$BODY_TRUNC" \
            --arg run_url      "$GITHUB_RUN_URL" \
            --arg color        "$COLOR" \
            '{
              attachments: [
                {
                  color: $color,
                  blocks: [
                    { "type": "header", "text": { "type": "plain_text", "text": $title, "emoji": true } },
                    { "type": "section",
                      "fields": [
                        { "type": "mrkdwn", "text": "*Actor:*\n" + $actor },
                        { "type": "mrkdwn", "text": "*Event:*\n" + $eventname + (if $action != "" then "/" + $action else "" end) },
                        { "type": "mrkdwn", "text": "*Repo:*\n" + $repo },
                        (if $numberField != "" then { "type": "mrkdwn", "text": $numberField } else empty end)
                      ]
                    },
                    (if $summary != "" then { "type": "section", "text": { "type": "mrkdwn", "text": "*Title:*\n" + $summary } } else empty end),
                    { "type": "section", "text": { "type": "mrkdwn", "text": "*Description:*\n" + $body } },
                    { "type": "actions",
                      "elements": [
                        { "type": "button", "text": { "type": "plain_text", "text": "Open in GitHub" }, "url": $url }
                      ]
                    },
                    { "type": "context",
                      "elements": [
                        { "type": "mrkdwn", "text": "Run: <" + $run_url + "|#${{ github.run_id }}> • $(date +%Y-%m-%d)" }
                      ]
                    }
                  ]
                }
              ]
            }' > payload.json

      - name: Send to Slack via Incoming Webhook
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          curl -s -X POST -H 'Content-type: application/json' --data @payload.json "$SLACK_WEBHOOK_URL" >/dev/null
